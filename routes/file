// Dependencies
const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");

const Sale = require("../models/salesModel");
const User = require("../models/userModel");
const Supplier = require("../models/supplierModel");
const WoodStock = require("../models/woodStockModel");
const FurnitureStock = require("../models/furnitureStockModel");
const {
  ensureAuthenticated,
  ensureManager,
  ensureSalesAgent,
} = require("../middleware/auth");

// GET Routes
router.get("/manager-dashboard", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    // --- Purchase Costs ---
    let totalExpenseTimber = await WoodStock.aggregate([
      { $match: { productType: "timber" } },
      {
        $group: {
          _id: null,
          totalCost: { $sum: { $multiply: ["$quantity", "$costPrice"] } }
        }
      }
    ]);
    let totalExpensePoles = await WoodStock.aggregate([
      { $match: { productType: "poles" } },
      {
        $group: {
          _id: null,
          totalCost: { $sum: { $multiply: ["$quantity", "$costPrice"] } }
        }
      }
    ]);
    let totalExpenseSoftWood = await WoodStock.aggregate([
      { $match: { productType: "softwood" } },
      {
        $group: {
          _id: null,
          totalCost: { $sum: { $multiply: ["$quantity", "$costPrice"] } }
        }
      }
    ]);
    let totalExpenseHardWood = await WoodStock.aggregate([
      { $match: { productType: "hardwood" } },
      {
        $group: {
          _id: null,
          totalCost: { $sum: { $multiply: ["$quantity", "$costPrice"] } }
        }
      }
    ]);

    totalExpenseTimber = totalExpenseTimber[0] ?? { totalCost: 0 };
    totalExpensePoles = totalExpensePoles[0] ?? { totalCost: 0 };
    totalExpenseSoftWood = totalExpenseSoftWood[0] ?? { totalCost: 0 };
    totalExpenseHardWood = totalExpenseHardWood[0] ?? { totalCost: 0 };

    // --- Sales (This Month) ---
    const startOfMonth = new Date();
    startOfMonth.setDate(1);
    startOfMonth.setHours(0, 0, 0, 0);

    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(endOfMonth.getMonth() + 1);
    endOfMonth.setMilliseconds(-1);

    const monthlySales = await Sale.aggregate([
      {
        $match: { dateOfSale: { $gte: startOfMonth, $lte: endOfMonth } }
      },
      {
        $group: { _id: null, total: { $sum: "$totalCost" } }
      }
    ]);
    const totalSalesThisMonth = monthlySales[0]?.total || 0;

    // --- Attendants Count ---
    const attendantsCount = await User.countDocuments({ role: "SalesAgent" });

    // --- Suppliers Count ---
    const suppliersCount = await Supplier.countDocuments();

    // --- Sales Per Attendant (Bar Chart) ---
    const salesPerAttendant = await Sale.aggregate([
      {
        $group: {
          _id: "$salesAgent",
          total: { $sum: "$totalCost" }
        }
      },
      {
        $lookup: {
          from: "users",
          localField: "_id",
          foreignField: "_id",
          as: "agent"
        }
      },
      {
        $unwind: "$agent"
      },
      {
        $project: {
          agentName: "$agent.fullName",
          total: 1
        }
      }
    ]);

    // --- Product Category Breakdown (Pie Chart) ---
    const categoryBreakdown = await Sale.aggregate([
      {
        $group: {
          _id: "$productType",
          total: { $sum: "$totalCost" }
        }
      }
    ]);

    // --- Monthly Sales Trend (Line Chart) ---
    const salesTrend = await Sale.aggregate([
      {
        $group: {
          _id: { month: { $month: "$dateOfSale" }, year: { $year: "$dateOfSale" } },
          total: { $sum: "$totalCost" }
        }
      },
      { $sort: { "_id.year": 1, "_id.month": 1 } }
    ]);

    res.render("managerDashboard", {
      manager: req.session.user,
      totalExpenseTimber,
      totalExpensePoles,
      totalExpenseSoftWood,
      totalExpenseHardWood,
      totalSalesThisMonth,
      attendantsCount,
      suppliersCount,
      salesPerAttendant,
      categoryBreakdown,
      salesTrend
    });

  } catch (error) {
    console.error("Aggregation Error:", error.message);
    res.status(500).send("Unable to load Manager Dashboard");
  }
});

router.get(
  "/sales-agent-dashboard",
  ensureAuthenticated,
  ensureSalesAgent,
  async (req, res) => {
    try {
      const agentId = req.session.user._id;

      // First and last day of this month
      const startOfMonth = new Date();
      startOfMonth.setDate(1);
      startOfMonth.setHours(0, 0, 0, 0);

      const endOfMonth = new Date(startOfMonth);
      endOfMonth.setMonth(endOfMonth.getMonth() + 1);
      endOfMonth.setMilliseconds(-1);

      const salesThisMonth = await Sale.find({
        salesAgent: req.session.user._id,
        dateOfSale: { $gte: startOfMonth, $lte: endOfMonth },
      });
      // Total sales this month
      const monthlySalesAgg = await Sale.aggregate([
        {
          $match: {
            salesAgent: new mongoose.Types.ObjectId(agentId),
            dateOfSale: { $gte: startOfMonth, $lte: endOfMonth },
          },
        },
        {
          $group: {
            _id: null,
            total: { $sum: "$totalCost" },
            count: { $sum: 1 },
          },
        },
      ]);

      const totalThisMonth = monthlySalesAgg[0]?.total || 0;
      const totalTransactions = monthlySalesAgg[0]?.count || 0;

      const monthlySalesByDay = {};
      salesThisMonth.forEach((sale) => {
        const day = sale.dateOfSale.getDate();
        if (!monthlySalesByDay[day]) monthlySalesByDay[day] = 0;
        monthlySalesByDay[day] += sale.totalCost;
      });

      // Recent transactions (last 5)
      const recentTransactions = await Sale.find({ salesAgent: agentId })
        .sort({ dateOfSale: -1 })
        .limit(5);

      res.render("salesAgentDashboard", {
        agent: req.session.user,
        totalThisMonth,
        totalTransactions,
        monthlySalesByDay,
        recentTransactions,
      });
    } catch (err) {
      console.error("Dashboard Error:", err);
      res.status(500).send("Server Error");
    }
  }
);

router.get("/view-user", async (req, res) => {
  try {
    let users = await User.find();
    res.render("displayUser", { users });
  } catch (error) {
    console.error(error);
    res.status(500).send("Server Error");
  }
});

router.get("/edit-user/:id", async (req, res) => {
  try {
    let user = await User.findById(req.params.id);
    res.render("editUser", { user });
  } catch (error) {
    console.error(error);
    res.status(500).send("Server Error! ");
  }
});

router.post("/edit-user/:id", async (req, res) => {
  try {
    await User.findByIdAndUpdate(req.params.id, req.body);
    res.redirect("/view-user");
  } catch (error) {
    console.error(error);
    res.status(400).send("User not found");
  }
});

router.delete("/delete-user/:id", async (req, res) => {
  try {
    await User.findByIdAndDelete(req.params.id);
    res.redirect("/view-user");
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Error deleting user" });
  }
});

router.get("/view-stock", ensureAuthenticated, ensureSalesAgent, async (req, res) => {
  try {
    const woodStocks = await WoodStock.find();
    const furnitureStocks = await FurnitureStock.find();

    // Combine stocks in one array
    const stocks = [...woodStocks, ...furnitureStocks];

    res.render("viewStock", { stocks });
  } catch (err) {
    console.error("Error loading stocks:", err.message);
    res.status(500).send("Error loading stocks");
  }
});

router.get("/manager-dashboard-data", ensureAuthenticated, ensureManager, async (req, res) => {
  try {
    // --- 1. Total sales this month ---
    const startOfMonth = new Date();
    startOfMonth.setDate(1);
    startOfMonth.setHours(0, 0, 0, 0);

    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(endOfMonth.getMonth() + 1);
    endOfMonth.setMilliseconds(-1);

    const monthlySalesAgg = await Sale.aggregate([
      { $match: { dateOfSale: { $gte: startOfMonth, $lte: endOfMonth } } },
      { $group: { _id: null, total: { $sum: "$totalCost" } } },
    ]);
    const totalSalesThisMonth = monthlySalesAgg[0]?.total || 0;

    // --- 2. Sales per agent ---
    const salesPerAgent = await Sale.aggregate([
      {
        $group: {
          _id: "$salesAgent",
          totalSales: { $sum: "$totalCost" },
        },
      },
      {
        $lookup: {
          from: "users",
          localField: "_id",
          foreignField: "_id",
          as: "agent",
        },
      },
      {
        $project: {
          agentName: { $arrayElemAt: ["$agent.fullName", 0] },
          totalSales: 1,
        },
      },
    ]);

    // --- 3. Product category breakdown ---
    const categoryBreakdown = await Sale.aggregate([
      {
        $group: {
          _id: "$productType",
          totalSales: { $sum: "$totalCost" },
        },
      },
    ]);

    // --- 4. Monthly sales trend (last 6 months) ---
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 5);

    const monthlyTrend = await Sale.aggregate([
      { $match: { dateOfSale: { $gte: sixMonthsAgo } } },
      {
        $group: {
          _id: { year: { $year: "$dateOfSale" }, month: { $month: "$dateOfSale" } },
          totalSales: { $sum: "$totalCost" },
        },
      },
      { $sort: { "_id.year": 1, "_id.month": 1 } },
    ]);

    // --- 5. Attendants count ---
    const attendantsCount = await User.countDocuments({ role: "SalesAgent" });

    // --- 6. Suppliers count ---
    const suppliersCount = await Supplier.countDocuments();

    // Send JSON data back to frontend
    res.json({
      totalSalesThisMonth,
      salesPerAgent,
      categoryBreakdown,
      monthlyTrend,
      attendantsCount,
      suppliersCount,
    });
  } catch (err) {
    console.error("Manager Dashboard Data Error:", err.message);
    res.status(500).json({ error: "Failed to load dashboard data" });
  }
});



module.exports = router;


async function loadManagerDashboard() {
  try {
    const response = await fetch("/manager-dashboard-data");
    const data = await response.json();

    // Top cards
    document.querySelector("#totalSales").textContent = new Intl.NumberFormat().format(data.totalSalesThisMonth);
    document.querySelector("#attendants").textContent = data.attendantsCount;
    document.querySelector("#suppliers").textContent = data.suppliersCount;

    // Bar Chart (Sales per Agent)
    const barCtx = document.querySelector("#barChart").getContext("2d");
    const barChart = new Chart(barCtx, {
      type: "bar",
      data: {
        labels: data.salesPerAgent.map(a => a.agentName),
        datasets: [{
          label: "Sales per Agent",
          data: data.salesPerAgent.map(a => a.totalSales),
          backgroundColor: "#3b82f6"
        }]
      },
      options: { responsive: true }
    });

    // Pie Chart (Product Category Breakdown)
    const pieCtx = document.querySelector("#pieChart").getContext("2d");
    const pieChart = new Chart(pieCtx, {
      type: "pie",
      data: {
        labels: data.categoryBreakdown.map(c => c._id),
        datasets: [{
          data: data.categoryBreakdown.map(c => c.totalSales),
          backgroundColor: ["#3b82f6", "#f59e0b"]
        }]
      },
      options: { responsive: true }
    });

    // Line Chart (Monthly Sales Trend)
    const lineCtx = document.querySelector("#lineChart").getContext("2d");
    const lineChart = new Chart(lineCtx, {
      type: "line",
      data: {
        labels: data.monthlyTrend.map(m => `${m._id.month}/${m._id.year}`),
        datasets: [{
          label: "Monthly Sales",
          data: data.monthlyTrend.map(m => m.totalSales),
          borderColor: "#10b981",
          fill: false,
        }]
      },
      options: { responsive: true }
    });

  } catch (err) {
    console.error("Error loading dashboard:", err);
  }
}

// Call the function when the page loads
loadManagerDashboard();
